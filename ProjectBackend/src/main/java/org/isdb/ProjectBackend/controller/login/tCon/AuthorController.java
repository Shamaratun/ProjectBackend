package org.isdb.ProjectBackend.controller.login.tCon;

import java.util.List;
import java.util.Optional;

import org.isdb.ProjectBackend.model.Author;
import org.isdb.ProjectBackend.service.AuthorService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/api/authors")
@CrossOrigin(origins = "http://localhost:4200")
public class AuthorController {

	@Autowired
	private AuthorService authorService;

	// Get all authors
	@GetMapping
	public ResponseEntity<List<Author>> getAllAuthors() {
		List<Author> authors = authorService.getAllAuthors();
		if (authors.isEmpty()) {
			return new ResponseEntity<>(HttpStatus.NO_CONTENT);
		}
		return new ResponseEntity<>(authors, HttpStatus.OK);
	}

	// Get author by ID
	@GetMapping("/{authorID}")
	public ResponseEntity<Author> getAuthorById(@PathVariable Long authorID) {
		Optional<Author> author = authorService.getAuthorById(authorID);
		if (author.isPresent()) {
			return new ResponseEntity<>(author.get(), HttpStatus.OK);
		}
		return new ResponseEntity<>(HttpStatus.NOT_FOUND);
	}

	// Create new author
	@PostMapping
	public ResponseEntity<Author> createAuthor(@RequestBody Author author) {
		if (author.getName() == null || author.getName().isEmpty()) {
			return new ResponseEntity<>(HttpStatus.BAD_REQUEST); // Validate required fields
		}

		// Do not set authorid, it will be generated by the database
		Author createdAuthor = authorService.createAuthor(author);
		return new ResponseEntity<>(createdAuthor, HttpStatus.CREATED);
	}

	// Update author by ID
	@PutMapping("/{authorID}")
	public ResponseEntity<Author> updateAuthor(@PathVariable Long authorID, @RequestBody Author author) {
		// Validate that the author exists
		Optional<Author> existingAuthor = authorService.getAuthorById(authorID);
		if (!existingAuthor.isPresent()) {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}

		// Update only the fields that are allowed (excluding authorID)
		author.setAuthorId(authorID); // Ensure the correct authorID is being updated
		Author updatedAuthor = authorService.updateAuthor(authorID, author);
		return new ResponseEntity<>(updatedAuthor, HttpStatus.OK);
	}

	// Delete author by ID
	@DeleteMapping("/{authorID}")
	public ResponseEntity<Void> deleteAuthor(@PathVariable Long authorID) {
		Optional<Author> existingAuthor = authorService.getAuthorById(authorID);
		if (!existingAuthor.isPresent()) {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}

		authorService.deleteAuthor(authorID);
		return new ResponseEntity<>(HttpStatus.NO_CONTENT);
	}
}
